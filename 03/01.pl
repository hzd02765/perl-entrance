#!/usr/bin/env perl

# 厳密な書式を定めたり, 未定義の変数を警告するといった効果があります
use strict;
# 望ましくない記述を警告してくれる効果があります
use warnings;
use feature ':5.10';


# シジル
# $, @, %, & といった、変数名の前に付く記号の事を指します。

# リスト
# ('値をコンマで区切って', '並べて', 'カッコで囲んだもの')


# 配列 (関数)
# 配列

# 前回、皆さんは配列の基本を勉強しました。

# さて、そもそも配列ってどんな時に使う (使いたくなる) と思いますか？
# 配列の用途
    # 要素間の順序関係を表現したい場合 (e.g. 待ち行列)
    # 要素の単純な集まりとして表現したい場合 (e.g. 集合)

# そしてそれらを同じように操作したい時!
# 配列を自在に操るためには

# 配列の要素を自由に
    # 追加
    # 取り出し

# できる必要があります。
# 要素の追加
    # push
    # unshift

# 要素の取り出し
    # pop
    # shift

# 追加と取り出しの関係
    # push / pop
    # unshift / shift

# push / pop

my @array = ('Alice', 'Bob');
push @array, 'Chris';     # ('Alice', 'Bob', 'Chris')
my $element = pop @array; # ('Alice', 'Bob')
print $element;           # => "Chris"

# 配列が
# □□□
# こういう状態の場合...

# push
# □□□■ ←末尾に要素を追加する

# pop
# □□≡■ ←末尾の要素を取り出す
